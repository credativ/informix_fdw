= About this software =

THIS CODE IS STILL ALPHA!

Please note that this software is still under high development.
There are likely still bugs and functional deficiencies in the code.
You are encouraged to report any bugs to the author.

The PostgreSQL Informix Foreign Datawrapper (FDW) module
is a driver for accessing remote informix table from within
PostgreSQL databases. Foreign Tables are transparently accessed
as normal PostgreSQL tables, they can be used to join remote data
against real PostgreSQL tables, import remote data and more. The FDW
interface implemented in PostgreSQL starting with version 9.1
supports the SQL/MED standard. Currently only read-only access
to remote data is supported.

Currently, only PostgreSQL 9.1 is supported.

= Requirements =

Informix FDW for PostgreSQL requires a complete
installation of the IBM ESQL/C Client SDK for Informix.

See

http://www-01.ibm.com/software/data/informix/tools/csdk/

for details. Furthermore, the FDW API is available since
PostgreSQL 9.1, so at least 9.1 is required to use this
module. Informix FDW is installed as an EXTENSION, for details
see

http://www.postgresql.org/docs/9.1/static/sql-createextension.html

Currently only PostgreSQL 9.1 is supported.

= Compiling =

INFORMIXDIR=/path/to/your/csdk/installation make install

= Example Setup =

CREATE EXTENSION informix_fdw;

CREATE SERVER centosifx_tcp
FOREIGN DATA WRAPPER informix_fdw
OPTIONS (informixserver 'centosifx_tcp',
         connection_costs '250');

CREATE USER MAPPING FOR CURRENT_USER
SERVER centosifx_tcp
OPTIONS (username 'informix', password 'informix');

CREATE FOREIGN TABLE ifx_fdw_test (
       id integer,
       value integer
    )
SERVER centosifx_tcp
OPTIONS ( query 'SELECT * FROM foo',
          database 'test',
          estimated_rows '500',
          informixdir '/Applications/IBM/informix');

CREATE SERVER sles11_tcp
FOREIGN DATA WRAPPER informix_fdw
OPTIONS (informixserver 'ol_informix1170',
         connection_costs '250');

CREATE USER MAPPING FOR CURRENT_USER
SERVER sles11_tcp
OPTIONS (username 'informix', password 'informix');

CREATE FOREIGN TABLE ifx_fdw_test (
       id integer,
       value integer
    )
SERVER sles11_tcp
OPTIONS ( query 'SELECT * FROM foo',
          database 'test',
          estimated_rows '500',
          informixserver 'ol_informix1170',
          informixdir '/Applications/IBM/informix');

= Supported datatypes =

Currently, only fundamental Informix data types are supported. There's
no support for opaque or user defined types at the moment. Implemented
datatype conversion routines:

BOOLEAN
DATETIME
DATE
SMALLINT
INT2
INT4
INT8/BIGINT
SERIAL
SERIAL8
VARCHAR
CHARACTER
LVARCHAR
NCHAR
NVARCHAR

= Predicate Pushdown =

The Informix FDW is able to pushdown query predicates which meet the following
conditions:

- The expression is of type VAR OP CONST, where VAR is a column reference to
  the foreign table and CONST a constant value
- OP must be one of the following operators:
  <, >, =, <=, >=, LIKE
- Matching of column references is done on a per-name basis: that means even
  you can name a column in a foreign table different than on your remote informix
  table, it cannot be successfully pushded down and will throw an error (in that case
  you need to turn of predicate pushdown).

= GLS Support =

Informix GLS support is provided through the CLIENT_LOCALE and DB_LOCALE
database connection parameters. At least, each foreign server is required
to define a valid CLIENT_LOCALE, which should match the server_encoding
of the PostgreSQL database.

= Helper functions =

To get a list of cached informix database connections in a PostgreSQL
session, use the ifx_fdw_get_connections() procedure:

#= SELECT * FROM ifx_fdw_get_connections();
-[ RECORD 1 ]--------+----------------------------
connection_name      | informixtestol_informix1170
established_by_relid | 230262
servername           | ol_informix1170
informixdir          | /Applications/IBM/informix
database             | test
username             | informix
usage                | 2
db_locale            | en_us.819
client_locale        | en_US.utf8

= Caveats =

== Datatype conversion issues ==

- Informix SQLDATE allows 0000-00-00, this is treated as NULL

= ToDo =

- Better error handling in case of NULL datum in the various convert*
  routines in ifx_conv.c

9.2 will introduce a number of interesting changes:

- Adjust API for PlanForeignScan() to new path generation
- Use FDW helper functions
- ANALYZE support for foreign tables
