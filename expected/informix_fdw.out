--
-- Set server parameters
--
-- NOTE: we turn off ECHO temporarily, since
--       sourcing the external regression test settings
--       might cause installcheck errors because of
--       varying settings (e.g. database name).
--
\set ECHO none
--
-- Suppress WARNINGs during regression test. This will
-- cause errors in case someone uses a database with logging.
--
SET client_min_messages TO ERROR;
--
-- PostgreSQL 12 increases the default of extra_float_digits to 1,
-- so make this explicit for the regression tests to get the same results
-- on older releases.
--
SET extra_float_digits TO 1;
--
-- Load extension
--
CREATE EXTENSION informix_fdw;
--
-- Create foreign server
--
CREATE SERVER test_server
FOREIGN DATA WRAPPER informix_fdw
OPTIONS (informixserver :'INFORMIXSERVER',
         informixdir :'INFORMIXDIR');
CREATE USER MAPPING FOR CURRENT_USER
SERVER test_server
OPTIONS (username :'INFORMIXUSER', password :'INFORMIXPASSWORD');
--
-- predicate pushdown test
--
CREATE FOREIGN TABLE inttest(f1 bigint not null, f2 integer, f3 smallint)
SERVER test_server
OPTIONS (table 'inttest',
         client_locale :'CLIENT_LOCALE',
         db_locale :'DB_LOCALE',
         database :'INFORMIXDB');
SELECT * FROM inttest WHERE f1 = 101 ORDER BY f1;
 f1  | f2  | f3  
-----+-----+-----
 101 | 120 | 301
(1 row)

SELECT * FROM inttest WHERE f1 = 101 OR f2 IS NULL ORDER BY f1;
      f1       | f2  | f3  
---------------+-----+-----
           101 | 120 | 301
 9187888888777 |     |    
(2 rows)

-- should succeed, uses 8 byte int value (MAX_INT) and NULL
SELECT f2, f3 FROM inttest WHERE f1 >= 4294967296;
 f2 | f3 
----+----
    |   
(1 row)

--
-- BLOB tests
--
CREATE FOREIGN TABLE byte_test(id integer, data bytea)
SERVER test_server
OPTIONS (table 'byte_test',
        client_locale :'CLIENT_LOCALE',
        db_locale :'DB_LOCALE',
        database :'INFORMIXDB');
CREATE FOREIGN TABLE text_test(id integer, data_binary bytea, data_text text)
SERVER test_server
OPTIONS (query 'SELECT * FROM text_test',
        client_locale :'CLIENT_LOCALE',
        db_locale :'DB_LOCALE',
        database :'INFORMIXDB',
        enable_blobs '1');
-- should fail
SELECT id, data FROM byte_test ORDER BY id;
ERROR:  could not use a SCROLL cursor to query an informix table with blobs
HINT:  set enable_blobs=1 to your foreign table to use a NO SCROLL cursor
-- should succeed
ALTER FOREIGN TABLE byte_test OPTIONS(ADD enable_blobs '1');
-- should succeed now
SELECT id, data FROM byte_test ORDER BY id;
 id |                                                                                         data                                                                                         
----+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    | \x00000006e72656265682064656c6d6cb6c34d0a00000206568636e616c676e6361626465480a6800000402e657369c30a6564c396c3849fc30a9c00000609fc39fc39fc39fc39fc39fc39fc39fc300001200000000a0000121
(1 row)

-- should fail, since column name/list vary
SELECT id, data_binary, data_text FROM text_test WHERE data_text = 'bar' ORDER BY id;
ERROR:  informix FDW error: "Column (data_text) not found in any table in the query (or SLV is undefined). "
DETAIL:  SQLSTATE IX000 (SQLCODE=39)
DROP FOREIGN TABLE text_test;
CREATE FOREIGN TABLE text_test(id integer, data_binary bytea, data_text text)
SERVER test_server
OPTIONS (query 'SELECT id, data AS data_binary, data AS data_text FROM text_test',
        client_locale :'CLIENT_LOCALE',
        db_locale :'DB_LOCALE',
        database :'INFORMIXDB',
        enable_blobs '1');
ALTER FOREIGN TABLE text_test OPTIONS (ADD disable_predicate_pushdown '1');
-- should fail
SELECT id, data_text AS data FROM text_test WHERE data_text = 'bar' ORDER BY id;
 id | data 
----+------
(0 rows)

-- should succeed
SELECT id, data_binary, data_text FROM text_test ;
 id |                                                                                                data_binary                                                                                                 |                data_text                 
----+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------
  1 | \x6265726e642068656c6d6c650a4dc3b66e6368656e676c6164626163680a48656973652e64650ac384c396c39c0ac39fc39fc39fc39fc39fc39fc39fc39fc39fc39fc39fc39fc39fc39fc39fc39fc39f0a                                       | bernd helmle                            +
    |                                                                                                                                                                                                            | Mönchengladbach                         +
    |                                                                                                                                                                                                            | Heise.de                                +
    |                                                                                                                                                                                                            | ÄÖÜ                                     +
    |                                                                                                                                                                                                            | ßßßßßßßßßßßßßßßßß                       +
    |                                                                                                                                                                                                            | 
  1 | \x446173204865727a206973742065696e206b72697374616c6c656e65722054656d70656c3b200a65696e6d616c207a657262726f6368656e200a6b616e6e206573206e696520776965646572207a7573616d6d656e676566c3bc67742077657264656e0a | Das Herz ist ein kristallener Tempel;   +
    |                                                                                                                                                                                                            | einmal zerbrochen                       +
    |                                                                                                                                                                                                            | kann es nie wieder zusammengefügt werden+
    |                                                                                                                                                                                                            | 
(2 rows)

-- should succeed, but no result
SELECT id, data_text FROM text_test WHERE data_text = 'blabla' ORDER BY id;
 id | data_text 
----+-----------
(0 rows)

-- should succeed, with result
SELECT id, data_text FROM text_test WHERE data_text LIKE '%Heise.de%' ORDER BY id;
 id |     data_text     
----+-------------------
  1 | bernd helmle     +
    | Mönchengladbach  +
    | Heise.de         +
    | ÄÖÜ              +
    | ßßßßßßßßßßßßßßßßß+
    | 
(1 row)

--
-- DATE/DATETIME tests
--
CREATE FOREIGN TABLE datetime_test (
    f1 timestamp with time zone,
    f2 character varying,
    f3 date,
    f4 bigint
)
SERVER test_server
OPTIONS (client_locale :'CLIENT_LOCALE',
         database :'INFORMIXDB',
         db_locale :'DB_LOCALE',
         gl_date '%iY-%m-%d',
         query 'SELECT f1 AS f1, "comment" AS f2, dt AS f3, id AS f4 FROM datetime_test'
);
SELECT * FROM datetime_test ORDER BY f4;
              f1              |       f2       |     f3     |     f4     
------------------------------+----------------+------------+------------
 Tue Apr 17 03:10:00 2012 PDT | comment        | 04-20-2012 |     998112
 Mon Feb 20 12:30:00 2012 PST | comment        | 02-20-2012 | 5100000000
(2 rows)

--
-- DECIMAL test (converts to PostgreSQL NUMERIC)
--
CREATE FOREIGN TABLE dec_test (val1 numeric(9,2), val2 numeric(8,0))
SERVER test_server
OPTIONS(database :'INFORMIXDB',
        client_locale :'CLIENT_LOCALE',
        db_locale :'DB_LOCALE',
        query 'SELECT value AS val1, value AS val2 FROM dec_test');
SELECT * FROM dec_test ORDER BY val1;
 val1 | val2 
------+------
 9.23 |    9
 9.23 |    9
(2 rows)

--
-- NVARCHAR
--
CREATE FOREIGN TABLE nvarchar_test
(
        val1 varchar(200),
        val2 text,
        val3 bpchar(200)
)
SERVER test_server
OPTIONS(database :'INFORMIXDB',
        client_locale :'CLIENT_LOCALE',
        db_locale :'DB_LOCALE',
        query 'SELECT val AS val1, val AS val2, val AS val3 FROM nvarchar_test');
-- Should succeed
SELECT * FROM nvarchar_test ORDER BY val1 COLLATE "C";
     val1     |     val2     |                                                                                                   val3                                                                                                   
--------------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bernd Helmle | Bernd Helmle | Bernd Helmle                                                                                                                                                                                            
 ÄÖÜ          | ÄÖÜ          | ÄÖÜ                                                                                                                                                                                                     
 ÄÖÜäöü       | ÄÖÜäöü       | ÄÖÜäöü                                                                                                                                                                                                  
 ß            | ß            | ß                                                                                                                                                                                                       
(4 rows)

DROP FOREIGN TABLE nvarchar_test;
CREATE FOREIGN TABLE nvarchar_test
(
        val1 varchar(200),
        val2 text,
        val3 bpchar(2) -- too short
)
SERVER test_server
OPTIONS(database :'INFORMIXDB',
        client_locale :'CLIENT_LOCALE',
        db_locale :'DB_LOCALE',
        query 'SELECT val AS val1, val AS val2, val AS val3 FROM nvarchar_test');
-- Should fail
SELECT * FROM nvarchar_test ORDER BY val1;
ERROR:  value too long for type character(2)
--
-- Test SERIAL/BOOLEAN datatype
--
CREATE FOREIGN TABLE serial_test
(
        f1 bigint NOT NULL,
        f2 varchar,
        flag boolean
)
SERVER test_server
OPTIONS(database :'INFORMIXDB',
        client_locale :'CLIENT_LOCALE',
        db_locale :'DB_LOCALE',
        table 'serial_test');
-- should succeed
SELECT f1, f2, flag FROM serial_test ORDER BY f1;
 f1  |                                                    f2                                                    | flag 
-----+----------------------------------------------------------------------------------------------------------+------
   1 | abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz | t
   2 | abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz | f
   3 | abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz | 
 100 | ÄÖÜäöü                                                                                                   | t
(4 rows)

-- should succeed
SELECT f1, f2, flag FROM serial_test WHERE flag IS NULL;
 f1 |                                                    f2                                                    | flag 
----+----------------------------------------------------------------------------------------------------------+------
  3 | abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz | 
(1 row)

-- should succeed
SELECT f2 FROM serial_test WHERE f1 = 100 OR flag IS NULL;
                                                    f2                                                    
----------------------------------------------------------------------------------------------------------
 abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
 ÄÖÜäöü
(2 rows)

--
-- Check NOT NULL constraints
--
ALTER FOREIGN TABLE inttest ALTER f2 SET NOT NULL;
-- should fail
SELECT f1, f2, f3 FROM inttest WHERE f2 IS NULL;
ERROR:  NULL value for column "f2" violates local NOT NULL constraint
ALTER FOREIGN TABLE inttest ALTER f2 DROP NOT NULL;
--should succeed
SELECT f1, f2, f3 FROM inttest WHERE f2 IS NULL;
      f1       | f2 | f3 
---------------+----+----
 9187888888777 |    |   
(1 row)

--------------------------------------------------------------------------------
-- The following tests checks the behavior of the Informix FDW
-- when used in self joins or joins to different foreign Informix tables.
-- This merely is a regression for statements associated to different
-- ESQL cursors internally.
--------------------------------------------------------------------------------
CREATE FOREIGN TABLE bar_serial(
       id integer NOT NULL,
       name varchar(100)
)
SERVER test_server
OPTIONS(database :'INFORMIXDB',
        client_locale :'CLIENT_LOCALE',
        db_locale :'DB_LOCALE',
        table 'bar_serial');
-- one row, self join
SELECT * FROM bar_serial s1 JOIN bar_serial s2 ON (s1.id = s2.id);
 id | name  | id | name  
----+-------+----+-------
  1 | bernd |  1 | bernd
(1 row)

-- join other Informix table, more complex
SELECT i1.f1, i2.id, substring(data_text, 1, 10)
FROM inttest i1
JOIN text_test i2 ON (i1.f1 = i2.id)
WHERE i1.f1 = 1 AND i2.id = 1;
 f1 | id | substring  
----+----+------------
  1 |  1 | bernd helm
  1 |  1 | Das Herz i
(2 rows)

--
-- Prepared statements
--
PREPARE p_serial_test(bigint) AS SELECT * FROM serial_test WHERE f1 = $1;
EXECUTE p_serial_test(100);
 f1  |   f2   | flag 
-----+--------+------
 100 | ÄÖÜäöü | t
(1 row)

EXECUTE p_serial_test(-1);
 f1 | f2 | flag 
----+----+------
(0 rows)

DEALLOCATE p_serial_test;
--
-- Cursor
--
DECLARE cur SCROLL CURSOR WITH HOLD FOR SELECT * FROM inttest ORDER BY f1;
FETCH 5 FROM cur;
  f1  | f2  | f3 
------+-----+----
 -199 | 120 |  1
 -198 | 120 |  2
 -197 | 120 |  3
 -196 | 120 |  4
 -195 | 120 |  5
(5 rows)

MOVE FIRST FROM cur;
FETCH 0 FROM cur;
  f1  | f2  | f3 
------+-----+----
 -199 | 120 |  1
(1 row)

FETCH 1 FROM cur;
  f1  | f2  | f3 
------+-----+----
 -198 | 120 |  2
(1 row)

CLOSE cur;
-- Cursor with transaction
BEGIN;
DECLARE cur SCROLL CURSOR FOR SELECT * FROM inttest ORDER BY f1;
FETCH 5 FROM cur;
  f1  | f2  | f3 
------+-----+----
 -199 | 120 |  1
 -198 | 120 |  2
 -197 | 120 |  3
 -196 | 120 |  4
 -195 | 120 |  5
(5 rows)

MOVE FIRST FROM cur;
FETCH 0 FROM cur;
  f1  | f2  | f3 
------+-----+----
 -199 | 120 |  1
(1 row)

FETCH 1 FROM cur;
  f1  | f2  | f3 
------+-----+----
 -198 | 120 |  2
(1 row)

CLOSE cur;
COMMIT;
--
-- Test ANALYZE
--
-- should succeed, but with a no-op, since text_test
-- is based on a query.
SET client_min_messages TO WARNING;
ANALYZE VERBOSE text_test;
WARNING:  skipping "text_test" --- cannot analyze this foreign table
SET client_min_messages TO ERROR;
-- should succeed
ANALYZE inttest;
--
-- ALTER FOREIGN TABLE ... DROP COLUMN
--
--
-- Drop first column
--
ALTER FOREIGN TABLE inttest DROP COLUMN f1;
--
-- Should fail, since table definition doesn't match anymore
-- (BIGINT -> INT4 conversion attempt rejected)
--
SELECT * FROM inttest WHERE f2 = 120;
ERROR:  could not convert informix type id 52 into pg type 23
-- ANALYZE as well...
ANALYZE inttest;
ERROR:  could not convert informix type id 52 into pg type 23
--
-- Adjust foreign table definition to match local columns
--
ALTER FOREIGN TABLE inttest OPTIONS(ADD query 'SELECT f2, f3 FROM inttest', DROP table);
SELECT * FROM inttest ORDER BY f2, f3 LIMIT 5;
 f2  | f3  
-----+-----
 -11 | -12
 120 |   1
 120 |   2
 120 |   3
 120 |   4
(5 rows)

--
-- Add f1 column again
--
ALTER FOREIGN TABLE inttest ADD COLUMN f1 bigint;
--
-- Should still fail, can't match column list
--
SELECT * FROM inttest WHERE f1 = 101;
ERROR:  foreign table "inttest" has more columns than remote source
--
-- Adjust foreign table again to match column list.
--
ALTER FOREIGN TABLE inttest OPTIONS(SET query 'SELECT f2, f3, f1 FROM inttest');
SELECT f1, f2, f3 FROM inttest WHERE f1 = 102;
 f1  | f2  | f3  
-----+-----+-----
 102 | 120 | 302
(1 row)

--
-- Clean up
--
DROP FOREIGN TABLE inttest;
DROP FOREIGN TABLE byte_test;
DROP FOREIGN TABLE text_test;
DROP FOREIGN TABLE datetime_test;
DROP FOREIGN TABLE dec_test;
DROP FOREIGN TABLE nvarchar_test;
DROP FOREIGN TABLE serial_test;
DROP FOREIGN TABLE bar_serial;
DROP USER MAPPING FOR CURRENT_USER SERVER test_server;
DROP SERVER test_server;
